一些基本定义：
数据库：保存有组织的数据的容器（通常是一个文件或者一组文件），通常来说数据库软件称为DBMS（数据库管理系统）
表：某种特定类型的结构化清单。（在同一个数据库中不能使用同一个表名，但是不同数据库可以）

列：表中的一个字段。所有的表都是由一个列或者多个列组成的。

数据类型：所容许的数据的类型。

行：表中的一个纪录。

主键：一列或者一组列，其值能够唯一区分表中的每个行。（并不是总是都需要主键）

表中的任何列都可以作为主键，只要它满足以下条件：

1.任意两行都不具有相同的的主键值。

2.每个行都必须有一个主键值。

一、使用MySQL
1.我们首先要做的就是选择已经创建的数据库或者创建一个数据库，可以用show databases来查看DBMS中已经创建的数据库。

mysql> show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| data               |
| mysql              |
| performance_schema |
| sakila             |
| sys                |
| world              |
+--------------------+
7 rows in set (0.19 sec)
2. 选择相应的数据库，我们才能进行操作。使用use来选定我们所要操作的数据库。

mysql> use data;
Database changed
3. 为了获得一个数据库内的表的列表，可以使用show tables;

mysql> show tables;
+----------------+
| Tables_in_data |
+----------------+
| member         |
+----------------+
1 row in set (0.00 sec)
4. show也可以用来显示表列

mysql> show columns from member;
+---------+-------------+------+-----+---------+----------------+
| Field   | Type        | Null | Key | Default | Extra          |
+---------+-------------+------+-----+---------+----------------+
| m_id    | int(11)     | NO   | PRI | NULL    | auto_increment |
| m_FN    | varchar(20) | YES  |     | NULL    |                |
| m_LN    | varchar(20) | YES  |     | NULL    |                |
| m_birth | datetime    | YES  |     | NULL    |                |
| m_info  | varchar(20) | YES  |     | NULL    |                |
+---------+-------------+------+-----+---------+----------------+
5 rows in set (0.01 sec)
在这里可以使用describe来代替show columns from

mysql> describe member;
+---------+-------------+------+-----+---------+----------------+
| Field   | Type        | Null | Key | Default | Extra          |
+---------+-------------+------+-----+---------+----------------+
| m_id    | int(11)     | NO   | PRI | NULL    | auto_increment |
| m_FN    | varchar(20) | YES  |     | NULL    |                |
| m_LN    | varchar(20) | YES  |     | NULL    |                |
| m_birth | datetime    | YES  |     | NULL    |                |
| m_info  | varchar(20) | YES  |     | NULL    |                |
+---------+-------------+------+-----+---------+----------------+
5 rows in set (0.00 sec)
拓展：所支持的show语句还有

show status:显示广泛的服务器状态信息（会很长）；

show create database +数据库名 

show create table +表名

show grants:用来显示授予用户的安全权限。

show errors和show warnings:显示错误和警告信息。

进一步了解show,可以利用help show来得到相关应用

例如：

mysql> show create table member;
...
| member | CREATE TABLE `member` (
  `m_id` int(11) NOT NULL AUTO_INCREMENT,
  `m_FN` varchar(20) DEFAULT NULL,
  `m_LN` varchar(20) DEFAULT NULL,
  `m_birth` datetime DEFAULT NULL,
  `m_info` varchar(20) DEFAULT NULL,
  PRIMARY KEY (`m_id`),
  UNIQUE KEY `m_id` (`m_id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8 |
...
1 row in set (0.05 sec)
二、检索数据
最经常使用的就是select语句了

2.1 首先检索单个列

mysql> select m_FN from member;
+--------+
| m_FN   |
+--------+
| Halen  |
| Samuel |
+--------+
2 rows in set (0.00 sec)
2.2 首先检索多个列

mysql> select m_id,m_FN from member;
+------+--------+
| m_id | m_FN   |
+------+--------+
|    1 | Halen  |
|    2 | Samuel |
+------+--------+
2 rows in set (0.00 sec)
2.3 检索所有列

mysql> select * from member;
+------+--------+-------+---------------------+---------+
| m_id | m_FN   | m_LN  | m_birth             | m_info  |
+------+--------+-------+---------------------+---------+
|    1 | Halen  | Park  | 1970-06-29 00:00:00 | GoodMan |
|    2 | Samuel | Green | 2018-07-14 16:59:50 | NULL    |
+------+--------+-------+---------------------+---------+
2 rows in set (0.00 sec)
2.4 检索不同的行，也就说检索对应的行是不同的，我们可以使用distinct关键词（distinct关键词应用于所有列，不仅仅是它后面的列）

mysql> select distinct m_id from member;
+------+
| m_id |
+------+
|    1 |
|    2 |
+------+
2 rows in set (0.07 sec)
2.5  限制结果（limit）

limit n限制n行

limit n,m 限制从索引行为n，然后朝下m行（行的索引从0开始）

mysql> select m_FN from member limit 1;
+-------+
| m_FN  |
+-------+
| Halen |
+-------+
1 row in set (0.00 sec)
2.6 使用完全限定的表名。

mysql> select member.m_FN from data.member;
+--------+
| m_FN   |
+--------+
| Halen  |
| Samuel |
+--------+
2 rows in set (0.05 sec)
 三、排序检索数据
子句：SQL语句由子句构成，有些子句是必须的，而有些是可选的。一个子句通常由一个关键字和所提供的数据组成。

3.1 排序数据

默认的是升序排列，即asc,降序采用desc

mysql> select m_FN,m_id from member order by m_FN desc;
+--------+------+
| m_FN   | m_id |
+--------+------+
| Samuel |    2 |
| Halen  |    1 |
+--------+------+
2 rows in set (0.00 sec)
3.2 按多个列排序（不区别大小写）

mysql> select m_LN from member order by m_FN desc,m_id;
+-------+
| m_LN  |
+-------+
| Green |
| Park  |
+-------+
2 rows in set (0.00 sec)
使用order by和limit可以组合找到最高或者最低的值

mysql> select m_LN,m_id from member order by m_id limit 1;
+------+------+
| m_LN | m_id |
+------+------+
| Park |    1 |
+------+------+
1 row in set (0.00 sec)
四、过滤数据
4.1 使用where语句（位于order by语句之前）

mysql> select m_id,m_LN from member where m_id=2 or m_id=1;
+------+-------+
| m_id | m_LN  |
+------+-------+
|    1 | Park  |
|    2 | Green |
+------+-------+
2 rows in set (0.07 sec)
可以采用的过滤符号分别有：=，<>，！=，<,<=,>,>=。

4.2 范围值检查（between..and..）

mysql> select m_LN,m_FN from member
    -> where m_id between 1 and 2;
+-------+--------+
| m_LN  | m_FN   |
+-------+--------+
| Park  | Halen  |
| Green | Samuel |
+-------+--------+
2 rows in set (0.03 sec)
4.3 空值null检查（is null）

mysql> select m_LN,m_id from member
    -> where m_info is null;
+-------+------+
| m_LN  | m_id |
+-------+------+
| Green |    2 |
+-------+------+
1 row in set (0.00 sec)
五、数据过滤
5.1 用来连接或改变where子句中的子句的关键词，也称逻辑操作符（and,or,in）

mysql> select m_LN,m_info from member where m_id=1 or m_FN='Halen';
+------+---------+
| m_LN | m_info  |
+------+---------+
| Park | GoodMan |
+------+---------+
1 row in set (0.00 sec)
5.2 计算次序，对于or和and（优先级and>or），它的顺序可以由括号来进行界定

mysql> select m_info,m_LN from member
    -> where (m_id=1 or m_id=2) and m_FN='Halen';
+---------+------+
| m_info  | m_LN |
+---------+------+
| GoodMan | Park |
+---------+------+
1 row in set (0.00 sec)
5.3 IN操作符（完成和or一样的功能，但是更简洁）

mysql> select m_LN,m_id from member
    -> where m_id in (1,2) order by m_FN desc;
+-------+------+
| m_LN  | m_id |
+-------+------+
| Green |    2 |
| Park  |    1 |
+-------+------+
2 rows in set (0.00 sec)
5.4 NOT操作符

mysql> select m_LN,m_id from member
    -> where m_id not in (1,3);
+-------+------+
| m_LN  | m_id |
+-------+------+
| Green |    2 |
+-------+------+
1 row in set (0.00 sec)
