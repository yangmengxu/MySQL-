#######################索引在数据库中的应用#############################
为了提高从表中检索数据的速度，来引出了索引。
索引是建立在数据库表对象上的，由表的一个字段或者多个字段生成的键组成，这些键存储在数据结构中（B树或哈希表）中，
主要分为B型树索引（BTREE）和哈希索引（HASH）
注意：InnoDB和MyISAM存储在引擎支持BTREE类型索引，MEMORY存储引擎支持HASH类型索引，默认为前者索引。

MySQL主要支持六种索引：普通索引、唯一索引、全局索引、多列索引，单列索引和空间索引。

<一>创建索引（三种方式）
1.直接在创建表的时候创建索引
mysql> create table newtable(
    -> id int(10) not null auto_increment,
    -> name varchar(14) default '',
    -> info text,
    -> ntime datetime,
    -> primary key(id),
    -> index index_id(id)
    -> )engine=MyISAM;
Query OK, 0 rows affected (0.06 sec)

mysql> desc newtable;
+-------+-------------+------+-----+---------+----------------+
| Field | Type        | Null | Key | Default | Extra          |
+-------+-------------+------+-----+---------+----------------+
| id    | int(10)     | NO   | PRI | NULL    | auto_increment |
| name  | varchar(14) | YES  |     |         |                |
| info  | text        | YES  |     | NULL    |                |
| ntime | datetime    | YES  |     | NULL    |                |
+-------+-------------+------+-----+---------+----------------+
4 rows in set (0.00 sec)

mysql> insert into newtable(id,name,info,ntime)
    -> values(1,'Tom','This is a test',now());
Query OK, 1 row affected (0.00 sec)

mysql> select * from newtable;
+----+------+----------------+---------------------+
| id | name | info           | ntime               |
+----+------+----------------+---------------------+
|  1 | Tom  | This is a test | 2019-07-28 22:04:36 |
+----+------+----------------+---------------------+
1 row in set (0.00 sec)

mysql> explain
    -> select * from newtable where id=1\G
*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: newtable
   partitions: NULL
         type: system
possible_keys: PRIMARY,index_id
          key: NULL
      key_len: NULL
          ref: NULL
         rows: 1
     filtered: 100.00
        Extra: NULL
1 row in set, 1 warning (0.00 sec)

2. 在表创建后创建索引

mysql> create index index_name
    -> on newtable(name);
Query OK, 1 row affected (0.11 sec)
Records: 1  Duplicates: 0  Warnings: 0

mysql> explain
    -> select * from newtable where name='Tom'\G
*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: newtable
   partitions: NULL
         type: system
possible_keys: index_name
          key: NULL
      key_len: NULL
          ref: NULL
         rows: 1
     filtered: 100.00
        Extra: NULL
1 row in set, 1 warning (0.05 sec)


3. 利用ALTER关键词添加索引

mysql> alter table newtable
    -> add fulltext index index_text(info);
Query OK, 1 row affected (0.17 sec)
Records: 1  Duplicates: 0  Warnings: 0

mysql> show create table newtable\G
*************************** 1. row ***************************
       Table: newtable
Create Table: CREATE TABLE `newtable` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `name` varchar(14) DEFAULT '',
  `info` text,
  `ntime` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `index_id` (`id`),
  KEY `index_name` (`name`),
  FULLTEXT KEY `index_text` (`info`)
) ENGINE=MyISAM AUTO_INCREMENT=2 DEFAULT CHARSET=utf8
1 row in set (0.00 sec)


对于唯一索引（unique index）、全局索引(fulltext index)、多列索引（index index_id(id,name)）同样的创建方法，但是
多列索引必须使用所关联的第一个字段，才能生效。


4.删除索引

mysql> drop index index_id on newtable;
Query OK, 1 row affected (0.11 sec)
Records: 1  Duplicates: 0  Warnings: 0
*******************和利用create index index_id on newtable(id);很类似******************

mysql> show create table newtable\G
*************************** 1. row ***************************
       Table: newtable
Create Table: CREATE TABLE `newtable` (
  `id` int(10) NOT NULL AUTO_INCREMENT,
  `name` varchar(14) DEFAULT '',
  `info` text,
  `ntime` datetime DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `index_name` (`name`),
  FULLTEXT KEY `index_text` (`info`)
) ENGINE=MyISAM AUTO_INCREMENT=2 DEFAULT CHARSET=utf8
1 row in set (0.00 sec)
